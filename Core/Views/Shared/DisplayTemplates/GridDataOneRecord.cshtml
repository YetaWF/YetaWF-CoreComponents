@*Copyright © 2016 Softel vdm, Inc. - http://yetawf.com/Documentation/YetaWF/Licensing*@
@inherits YetaWF.Core.Views.Shared.Grid<object>
@using YetaWF.Core.Views
@using YetaWF.Core.Models
@using YetaWF.Core.Support
@using System.Web.Mvc
@{

    // check if the grid is readonly or the record supports a "__editable" grid entry property
    bool recordEnabled = true;
    bool readOnly = true;
    int recordCount = 0;
    // We're coming here from grid.cshtml. We need to "fix" our viewdata so we generate correct field names
    string prefix = "";
    GridDefinition gridDef = Manager.TryGetParentModel(Skip: 1) as GridDefinition;
    GridDefinition.GridEntryDefinition gridEntry = Manager.GetParentModel() as GridDefinition.GridEntryDefinition;
    DataSourceResult dataSrc = Manager.GetParentModel() as DataSourceResult;
    List<PropertyListEntry> hiddenProps = null;
    List<PropertyListEntry> props = null;
    if (gridDef != null) {
        readOnly = gridDef.ReadOnly;
        if (!readOnly) {
            YetaWF.Core.Models.ObjectSupport.TryGetPropertyValue<bool>(Model, "__editable", out recordEnabled, true);
        }
        recordCount = gridDef.RecordCount;
        prefix = Html.GetDataFieldPrefix(gridDef).ToString();
        hiddenProps = GridHelper.GetHiddenGridProperties(Model, gridDef);
        props = GridHelper.GetGridProperties(Model, gridDef);
    } else if (dataSrc != null) {
        if (string.IsNullOrWhiteSpace(dataSrc.FieldPrefix)) {
            readOnly = true;
        } else {
            readOnly = false;
            prefix = dataSrc.FieldPrefix;
        }
        recordCount = dataSrc.RecordCount;
        hiddenProps = GridHelper.GetHiddenGridProperties(Model);//not sure whether this could fail - if so, handle it
        props = GridHelper.GetGridProperties(Model);
    } else if (gridEntry != null) {
        readOnly = false;
        prefix = gridEntry.Prefix;
        hiddenProps = GridHelper.GetHiddenGridProperties(Model);//not sure whether this could fail - if so, handle it
        props = GridHelper.GetGridProperties(Model);
    }


    int propCount = 0;

    foreach (PropertyListEntry prop in props) {

        // Swap out the ViewData so we get the names/ids that we want for these objects
        ViewDataDictionary oldVdd = Html.ViewContext.ViewData;

        ModelMetadata meta = ModelMetadataProviders.Current.GetMetadataForProperty(() => prop.Value, Model.GetType(), prop.Name);
        using (new HtmlHelperExtender.ControlInfoOverride(meta.AdditionalValues)) {

            string output = "";
            if (propCount > 0) {
                @: ,
            }
            @: "@prop.Name":

            if (prop.Name == "__highlight") {
                // check whether the record supports a special "__highlight" property
                @Html.Raw(prop.Value is bool && (bool)prop.Value == true ? "true" : "false")
            } else {

                Html.ViewContext.ViewData = Html.ViewDataContainer.ViewData = new ViewDataDictionary(prop.Value) {
                    ModelMetadata = meta,
                    TemplateInfo = new TemplateInfo() { HtmlFieldPrefix = prefix },
                };

                if (!readOnly && prop.Editable && recordEnabled) {
                    //output = Html.Editor(prop.Name).ToString();
                    output = Html.EditorFor(m => prop.Value, prop.UIHint, "[" + recordCount + "]." + prop.Name).ToString();
                } else {
                    output = Html.DisplayFor(m => prop.Value, prop.UIHint, "[" + recordCount + "]." + prop.Name).ToString();
                }
                if (string.IsNullOrWhiteSpace(output)) { output = "&nbsp;"; }

                if (!readOnly && prop.Editable && hiddenProps != null) {
                    // list hidden properties with the first editable field
                    foreach (var h in hiddenProps) {
                        output += Html.DisplayFor(m => h.Value, "Hidden", "[" + recordCount + "]." + h.Name).ToString();
                    }
                    hiddenProps = null;
                }

                @Html.Raw(JSEncode(output))
            }

        }
        ++propCount;

        // restore original viewdata
        Html.ViewContext.ViewData = Html.ViewDataContainer.ViewData = oldVdd;
    }

}
