{"version":3,"sources":["AddOns/YetaWF/Core/_Addons/Basics/Basics.ts"],"names":[],"mappings":"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","file":"Basics.d.ts","sourcesContent":["/* Copyright © 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/Licensing */\r\n\r\n/* TODO : While transitioning to TypeScript and to maintain compatibility with all plain JavaScript, some defs are global rather than in their own namespace.\r\n   Once the transition is complete, we need to revisit this */\r\n\r\n/* Basics API, to be implemented by rendering-specific code - rendering code must define a global YetaWF_BasicsImpl object implementing IBasicsImpl */\r\n\r\n/**\r\n * Implemented by custom rendering.\r\n */\r\ndeclare var YetaWF_BasicsImpl: YetaWF.IBasicsImpl;\r\n\r\n/* Polyfills */\r\ninterface String {\r\n    isValidInt(s: number, e: number): boolean;\r\n    format(...args: any[]): string;\r\n}\r\n\r\ninterface Window { // expose this as a known window property\r\n    $YetaWF: YetaWF.BasicsServices;\r\n}\r\ninterface Event {\r\n    __YetaWFElem: HTMLElement; // the element that matched the selector during event bubbling\r\n}\r\n\r\n/**\r\n * Class implementing basic services used throughout YetaWF.\r\n */\r\nnamespace YetaWF {\r\n\r\n    export interface MessageOptions {\r\n        encoded: boolean;\r\n    }\r\n    export interface CharSize {\r\n        width: number;\r\n        height: number;\r\n    }\r\n\r\n    interface ReloadInfo {\r\n        module: HTMLElement;\r\n        tagId: string;\r\n        callback(module: HTMLElement): void;\r\n    }\r\n    interface ContentChangeEntry {\r\n        callback(addonGuid: string, on: boolean): void;\r\n    }\r\n    interface PanelSwitchedEntry {\r\n        callback(panel: HTMLElement): void;\r\n    }\r\n    interface ActivateDivEntry {\r\n        callback(tags: HTMLElement): void;\r\n    }\r\n    interface NewPageEntry {\r\n        callback(url: string): void;\r\n    }\r\n    interface PageChangeEntry {\r\n        callback() : void;\r\n    }\r\n    interface DataObjectEntry {\r\n        DivId: string;\r\n        Data: any;\r\n    }\r\n\r\n    /**\r\n     * Implemented by rendered (such as ComponentsHTML)\r\n     */\r\n    export interface IBasicsImpl {\r\n\r\n        /** Returns whether the loading indicator is on or off */\r\n        isLoading: boolean;\r\n\r\n        /**\r\n         * Turns a loading indicator on/off.\r\n         * @param on\r\n         */\r\n        setLoading(on?: boolean): void;\r\n\r\n        /**\r\n         * Displays an informational message, usually in a popup.\r\n         */\r\n        message(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void;\r\n        /**\r\n         * Displays an error message, usually in a popup.\r\n         */\r\n        error(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void;\r\n        /**\r\n         * Displays a confirmation message, usually in a popup.\r\n         */\r\n        confirm(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void;\r\n        /**\r\n         * Displays an alert message, usually in a popup.\r\n         */\r\n        alert(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void;\r\n        /**\r\n         * Displays an alert message, usually in a popup.\r\n         */\r\n        alertYesNo(message: string, title?: string, onYes?: () => void, onNo?: () => void, options?: MessageOptions): void;\r\n        /**\r\n         * Displays a \"Please Wait\" message.\r\n         */\r\n        pleaseWait(message?: string, title?: string): void;\r\n        /**\r\n         * Closes the \"Please Wait\" message (if any).\r\n         */\r\n        pleaseWaitClose(): void;\r\n        /**\r\n         * Closes any open overlays, menus, dropdownlists, tooltips, etc. (Popup windows are not handled and are explicitly closed using $YetaWF.Popups)\r\n         */\r\n        closeOverlays(): void;\r\n        /**\r\n         * Enable/disable an element.\r\n         * Some child items need some extra settings when disabled=disabled isn't enough.\r\n         * Also used to update visual styles to reflect the status.\r\n         */\r\n        elementEnableToggle(elem: HTMLElement, enable: boolean): void;\r\n    }\r\n\r\n    export interface IWhenReady {\r\n        callback(tag: HTMLElement): void;\r\n    }\r\n    export interface IClearDiv {\r\n        callback?(elem: HTMLElement): void;\r\n    }\r\n\r\n    export class BasicsServices /* implements IBasicsImpl */ { // doesn't need to implement IBasicImpl, used for type checking only\r\n\r\n        // Implemented by renderer\r\n        // Implemented by renderer\r\n        // Implemented by renderer\r\n\r\n        /** Returns whether the loading indicator is on or off */\r\n        public get isLoading(): boolean {\r\n            return YetaWF_BasicsImpl.isLoading;\r\n        }\r\n\r\n        /**\r\n         * Turns a loading indicator on/off.\r\n         * @param on\r\n         */\r\n        public setLoading(on?: boolean): void {\r\n            YetaWF_BasicsImpl.setLoading(on);\r\n            if (on === false)\r\n                this.pleaseWaitClose();\r\n        }\r\n\r\n        /**\r\n         * Displays an informational message, usually in a popup.\r\n         */\r\n        public message(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void { YetaWF_BasicsImpl.message(message, title, onOK, options); }\r\n        /**\r\n         * Displays an error message, usually in a popup.\r\n         */\r\n        public error(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void { YetaWF_BasicsImpl.error(message, title, onOK, options); }\r\n        /**\r\n         * Displays a confirmation message, usually in a popup.\r\n         */\r\n        public confirm(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void { YetaWF_BasicsImpl.confirm(message, title, onOK, options); }\r\n        /**\r\n         * Displays an alert message, usually in a popup.\r\n         */\r\n        public alert(message: string, title?: string, onOK?: () => void, options?: MessageOptions): void { YetaWF_BasicsImpl.alert(message, title, onOK, options); }\r\n        /**\r\n         * Displays an alert message with Yes/No buttons, usually in a popup.\r\n         */\r\n        public alertYesNo(message: string, title?: string, onYes?: () => void, onNo?: () => void, options?: MessageOptions): void { YetaWF_BasicsImpl.alertYesNo(message, title, onYes, onNo, options); }\r\n        /**\r\n         * Displays a \"Please Wait\" message\r\n         */\r\n        public pleaseWait(message?: string, title?: string): void { YetaWF_BasicsImpl.pleaseWait(message, title); }\r\n        /**\r\n         * Closes the \"Please Wait\" message (if any).\r\n         */\r\n        pleaseWaitClose(): void { YetaWF_BasicsImpl.pleaseWaitClose(); }\r\n        /**\r\n         * Closes any open overlays, menus, dropdownlists, tooltips, etc. (Popup windows are not handled and are explicitly closed using $YetaWF.Popups)\r\n         */\r\n        closeOverlays(): void { YetaWF_BasicsImpl.closeOverlays(); }\r\n\r\n        // Implemented by YetaWF\r\n        // Implemented by YetaWF\r\n        // Implemented by YetaWF\r\n\r\n        // Content handling (Unified Page Sets)\r\n\r\n        public ContentHandling: YetaWF.Content;\r\n\r\n        // Anchor handling\r\n\r\n        public AnchorHandling: YetaWF.Anchors;\r\n\r\n        // Form handling\r\n        private forms: YetaWF.Forms | null = null;\r\n\r\n        get Forms(): YetaWF.Forms {\r\n            if (!this.forms) {\r\n                this.forms = new YetaWF.Forms(); // if this fails, forms.*.js was not included automatically\r\n                this.forms.init();\r\n            }\r\n            return this.forms;\r\n        }\r\n        public FormsAvailable() : boolean {\r\n            return this.forms != null;\r\n        }\r\n\r\n        // Popup handling\r\n        private popups: YetaWF.Popups | null = null;\r\n\r\n        get Popups(): YetaWF.Popups {\r\n            if (!this.popups) {\r\n                this.popups = new YetaWF.Popups(); // if this fails, popups.*.js was not included automatically\r\n                this.popups.init();\r\n            }\r\n            return this.popups;\r\n        }\r\n        public PopupsAvailable(): boolean {\r\n            return this.popups != null;\r\n        }\r\n\r\n        // Url parsing\r\n\r\n        public parseUrl(url: string): YetaWF.Url {\r\n            var uri = new YetaWF.Url();\r\n            uri.parse(url);\r\n            return uri;\r\n        }\r\n\r\n        // Focus\r\n\r\n        /**\r\n         * Set focus to a suitable field within the specified elements.\r\n         */\r\n        public setFocus(tags?: HTMLElement[]): void {\r\n            //TODO: this should also consider input fields with validation errors (although that seems to magically work right now)\r\n            if (!tags) {\r\n                tags = [];\r\n                tags.push(document.body);\r\n            }\r\n            var f: HTMLElement | null = null;\r\n            var items = this.getElementsBySelector(\".focusonme\", tags);\r\n            items = this.limitToVisibleOnly(items); //:visible\r\n            for (let item of items) {\r\n                if (item.tagName === \"DIV\") { // if we found a div, find the edit element instead\r\n                    var i = this.getElementsBySelector(\"input,select,textarea,.yt_dropdownlist_base\", [item]);\r\n                    i = this.limitToNotTypeHidden(i); // .not(\"input[type='hidden']\")\r\n                    i = this.limitToVisibleOnly(i); // :visible\r\n                    if (i.length > 0) {\r\n                        f = i[0];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // We probably don't want to set the focus to any control - made OPT-IN for now\r\n            //if ($f == null) {\r\n            //    $items = $('input:visible,select:visible', $obj).not(\"input[type='hidden']\");// just find something usable\r\n            //    // filter out anything in a grid (filters, pager, etc)\r\n            //    $items.each(function (index) {\r\n            //        var $i = $(this)\r\n            //        if ($i.parents('.ui-jqgrid').length == 0) {\r\n            //            $f = $i;\r\n            //            return false; // not in a grid, so it's ok\r\n            //        }\r\n            //    });\r\n            //}\r\n            if (f != null) {\r\n                try {\r\n                    f.focus();\r\n                } catch (e) { }\r\n            }\r\n        }\r\n\r\n        // Screen size\r\n\r\n        /**\r\n         * Sets yCondense/yNoCondense css class on popup or body to indicate screen size.\r\n         * Sets rendering mode based on window size\r\n         * we can't really use @media (max-width:...) in css because popups (in Unified Page Sets) don't use iframes so their size may be small but\r\n         * doesn't match @media screen (ie. the window). So, instead we add the css class yCondense to the <body> or popup <div> to indicate we want\r\n         * a more condensed appearance.\r\n         */\r\n        public setCondense(tag: HTMLElement, width: number): void {\r\n            if (width < YVolatile.Skin.MinWidthForPopups) {\r\n                this.elementAddClass(tag, \"yCondense\");\r\n                this.elementRemoveClass(tag, \"yNoCondense\");\r\n            } else {\r\n                this.elementAddClass(tag, \"yNoCondense\");\r\n                this.elementRemoveClass(tag, \"yCondense\");\r\n            }\r\n        }\r\n\r\n        // Popup\r\n\r\n        /**\r\n         * Returns whether a popup is active\r\n         */\r\n        public isInPopup(): boolean {\r\n            return YVolatile.Basics.IsInPopup;\r\n        }\r\n        //\r\n        /**\r\n         * Close any popup window.\r\n         */\r\n        public closePopup(forceReload?: boolean): void {\r\n            if (this.PopupsAvailable())\r\n                this.Popups.closePopup(forceReload);\r\n        }\r\n\r\n        // Scrolling\r\n\r\n        public setScrollPosition(): boolean {\r\n            // positioning isn't exact. For example, TextArea (i.e. CKEditor) will expand the window size which may happen later.\r\n            var uri = this.parseUrl(window.location.href);\r\n            var left = uri.getSearch(YConfigs.Basics.Link_ScrollLeft);\r\n            var top = uri.getSearch(YConfigs.Basics.Link_ScrollTop);\r\n            if (left || top) {\r\n                window.scroll(left ? parseInt(left, 10) : 0, top ? parseInt(top, 10) : 0);\r\n                return true;\r\n            } else\r\n                return false;\r\n        }\r\n\r\n        // Page\r\n\r\n        /**\r\n         * currently loaded addons\r\n         */\r\n        public UnifiedAddonModsLoaded: string[] = [];\r\n\r\n        /**\r\n         * Initialize the current page (full page load) - runs during page load, before document ready\r\n         */\r\n        public initPage(): void {\r\n\r\n            this.init();\r\n\r\n            // page position\r\n\r\n            var scrolled = this.setScrollPosition();\r\n            if (!scrolled) {\r\n                if (YVolatile.Basics.UnifiedMode === UnifiedModeEnum.ShowDivs) {\r\n                    var uri = this.parseUrl(window.location.href);\r\n                    var divs = this.getElementsBySelector(`.yUnified[data-url=\"${uri.getPath()}\"]`);\r\n                    if (divs.length > 0) {\r\n                        window.scroll(0, divs[0].offsetTop);\r\n                        scrolled = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // FOCUS\r\n            // FOCUS\r\n            // FOCUS\r\n\r\n            this.registerDocumentReady(() => { // only needed during full page load\r\n                if (!scrolled && location.hash.length <= 1)\r\n                    this.setFocus();\r\n            });\r\n\r\n            // content navigation\r\n\r\n            this.UnifiedAddonModsLoaded = YVolatile.Basics.UnifiedAddonModsPrevious;// save loaded addons\r\n        }\r\n\r\n        // Panes\r\n\r\n        public showPaneSet(id: string, editMode: boolean, equalHeights: boolean): void {\r\n\r\n            var div = this.getElementById(id);\r\n            var shown = false;\r\n            if (editMode) {\r\n                div.style.display = \"block\";\r\n                shown = true;\r\n            } else {\r\n                // show the pane if it has modules\r\n                var mod = this.getElement1BySelectorCond(\"div.yModule\", [div]);\r\n                if (mod) {\r\n                    div.style.display = \"block\";\r\n                    shown = true;\r\n                }\r\n            }\r\n            if (shown && equalHeights) {\r\n                // make all panes the same height\r\n                // this should happen late in case the content is changed dynamically (use with caution)\r\n                // if it does, the pane will still expand because we're only setting the minimum height\r\n                this.registerDocumentReady(() => { // TODO: This only works for full page loads\r\n                    var panes = this.getElementsBySelector(`#${id} > div`);// get all immediate child divs (i.e., the panes)\r\n                    panes = this.limitToVisibleOnly(panes); //:visible\r\n                    // exclude panes that have .y_cleardiv\r\n                    var newPanes: HTMLElement[] = [];\r\n                    for (let pane of panes) {\r\n                        if (!this.elementHasClass(pane, \"y_cleardiv\"))\r\n                            newPanes.push(pane);\r\n                    }\r\n                    panes = newPanes;\r\n\r\n                    var height = 0;\r\n                    // calc height\r\n                    for (let pane of panes) {\r\n                        var h = pane.clientHeight;\r\n                        if (h > height)\r\n                            height = h;\r\n                    }\r\n                    // set each pane's height\r\n                    for (let pane of panes) {\r\n                        pane.style.minHeight = `${height}px`;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // Navigation\r\n\r\n        public suppressPopState: number = 0;\r\n\r\n        public setUrl(url: string): void {\r\n            try {\r\n                var stateObj = {};\r\n                history.pushState(stateObj, \"\", url);\r\n            } catch (err) { }\r\n        }\r\n\r\n        // Reload, refresh\r\n\r\n        /**\r\n         * Reloads the current page - in its entirety (full page load)\r\n         */\r\n        public reloadPage(keepPosition?: boolean, w?: Window): void {\r\n\r\n            if (!w)\r\n                w = window;\r\n            if (!keepPosition)\r\n                keepPosition = false;\r\n\r\n            var uri = this.parseUrl(w.location.href);\r\n            uri.removeSearch(YConfigs.Basics.Link_ScrollLeft);\r\n            uri.removeSearch(YConfigs.Basics.Link_ScrollTop);\r\n            if (keepPosition) {\r\n                var left = (document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft;\r\n                if (left)\r\n                    uri.addSearch(YConfigs.Basics.Link_ScrollLeft, left.toString());\r\n                var top = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\r\n                if (top)\r\n                    uri.addSearch(YConfigs.Basics.Link_ScrollTop, top.toString());\r\n            }\r\n            uri.removeSearch(\"!rand\");\r\n            uri.addSearch(\"!rand\", ((new Date()).getTime()).toString());// cache buster\r\n\r\n            if (YVolatile.Basics.UnifiedMode !== UnifiedModeEnum.None) {\r\n                if (this.ContentHandling.setContent(uri, true))\r\n                    return;\r\n            }\r\n            if (keepPosition) {\r\n                w.location.assign(uri.toUrl());\r\n                return;\r\n            }\r\n            w.location.reload(true);\r\n        }\r\n\r\n        /**\r\n         * Reloads a module in place, defined by the specified tag (any tag within the module).\r\n         */\r\n        public reloadModule(tag?: HTMLElement): void {\r\n            if (!tag) {\r\n                if (!this.reloadingModuleTagInModule) throw \"No module found\";/*DEBUG*/\r\n                tag = this.reloadingModuleTagInModule;\r\n            }\r\n            var mod = this.getModuleFromTag(tag);\r\n            var form = this.getElement1BySelector(\"form\", [mod]) as HTMLFormElement;\r\n            this.Forms.submit(form, false, YConfigs.Basics.Link_SubmitIsApply + \"=y\");// the form must support a simple Apply\r\n        }\r\n\r\n        private reloadingModuleTagInModule: HTMLElement | null = null;\r\n\r\n        public refreshModule(mod: HTMLElement): void {\r\n            if (!this.getElementByIdCond(mod.id)) throw `Module with id ${mod.id} not found`;/*DEBUG*/\r\n            this.processReloadInfo(mod.id);\r\n        }\r\n        public refreshModuleByAnyTag(elem: HTMLElement): void {\r\n            var mod = this.getModuleFromTag(elem);\r\n            this.processReloadInfo(mod.id);\r\n        }\r\n        private processReloadInfo(moduleId: string): void {\r\n            var len = this.reloadInfo.length;\r\n            for (var i = 0; i < len; ++i) {\r\n                let entry = this.reloadInfo[i];\r\n                if (entry.module.id === moduleId) {\r\n                    if (this.getElementByIdCond(entry.tagId)) {\r\n                        // call the reload callback\r\n                        entry.callback(entry.module);\r\n                    } else {\r\n                        // the tag requesting the callback no longer exists\r\n                        this.reloadInfo.splice(i, 1);\r\n                        --len;\r\n                        --i;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public refreshPage(): void {\r\n            var len = this.reloadInfo.length;\r\n            for (var i = 0; i < len; ++i) {\r\n                let entry = this.reloadInfo[i];\r\n                if (this.getElementByIdCond(entry.module.id)) { // the module exists\r\n                    if (this.getElementByIdCond(entry.tagId)) {\r\n                        // the tag requesting the callback still exists\r\n                        if (!this.elementClosestCond(entry.module, \".yPopup, .yPopupDyn\")) // don't refresh modules within popups when refreshing the page\r\n                            entry.callback(entry.module);\r\n                    } else {\r\n                        // the tag requesting the callback no longer exists\r\n                        this.reloadInfo.splice(i, 1);\r\n                        --len;\r\n                        --i;\r\n                    }\r\n                } else {\r\n                    // the module no longer exists\r\n                    this.reloadInfo.splice(i, 1);\r\n                    --len;\r\n                    --i;\r\n                }\r\n            }\r\n        }\r\n\r\n        private reloadInfo: ReloadInfo[] = [];\r\n\r\n        /**\r\n         * Registers a callback that is called when a module is to be refreshed/reloaded.\r\n         * @param tag Defines the tag that is requesting the callback when the containing module is refreshed.\r\n         * @param callback Defines the callback to be called.\r\n         * The element defined by tag may no longer exist when a module is refreshed in which case the callback is not called (and removed).\r\n         */\r\n        public registerModuleRefresh(tag: HTMLElement, callback: (module: HTMLElement) => void): void {\r\n            var module = $YetaWF.getModuleFromTag(tag); // get the containing module\r\n            if (!tag.id || tag.id.length === 0)\r\n                throw `No id defined for ${tag.outerHTML}`;\r\n            // reuse existing entry if this id is already registered\r\n            for (let entry of this.reloadInfo) {\r\n                if (entry.tagId === tag.id) {\r\n                    entry.callback = callback;\r\n                    return;\r\n                }\r\n            }\r\n            // new id\r\n            this.reloadInfo.push({ module: module, tagId: tag.id, callback: callback });\r\n        }\r\n\r\n        // Module locator\r\n\r\n        /**\r\n         * Get a module defined by the specified tag (any tag within the module). Returns null if none found.\r\n         */\r\n        public getModuleFromTagCond(tag: HTMLElement): HTMLElement | null {\r\n            var mod = this.elementClosestCond(tag, \".yModule\");\r\n            if (!mod) return null;\r\n            return mod;\r\n        }\r\n        /**\r\n         * Get a module defined by the specified tag (any tag within the module). Throws exception if none found.\r\n         */\r\n        public getModuleFromTag(tag: HTMLElement): HTMLElement {\r\n            var mod = this.getModuleFromTagCond(tag);\r\n            // tslint:disable-next-line:no-debugger\r\n            if (mod == null) { debugger; throw \"Can't find containing module\"; }/*DEBUG*/\r\n            return mod;\r\n        }\r\n\r\n        public getModuleGuidFromTag(tag: HTMLElement): string {\r\n            var mod = this.getModuleFromTag(tag);\r\n            var guid = mod.getAttribute(\"data-moduleguid\");\r\n            if (!guid) throw \"Can't find module guid\";/*DEBUG*/\r\n            return guid;\r\n        }\r\n\r\n        // Get character size\r\n\r\n        // CHARSIZE (from module or page/YVolatile)\r\n        /**\r\n         * Get the current character size used by the module defined using the specified tag (any tag within the module) or the default size.\r\n         */\r\n        public getCharSizeFromTag(tag: HTMLElement | null): CharSize {\r\n            var width: number, height: number;\r\n            var mod: HTMLElement | null = null;\r\n            if (tag)\r\n                mod = this.getModuleFromTagCond(tag);\r\n            if (mod) {\r\n                var w = mod.getAttribute(\"data-charwidthavg\");\r\n                if (!w) throw \"missing data-charwidthavg attribute\";/*DEBUG*/\r\n                width = Number(w);\r\n                var h = mod.getAttribute(\"data-charheight\");\r\n                if (!h) throw \"missing data-charheight attribute\";/*DEBUG*/\r\n                height = Number(h);\r\n            } else {\r\n                width = YVolatile.Basics.CharWidthAvg;\r\n                height = YVolatile.Basics.CharHeight;\r\n            }\r\n            return { width: width, height: height };\r\n        }\r\n\r\n        // Utility functions\r\n\r\n        public htmlEscape(s: string | undefined, preserveCR?: string): string {\r\n            preserveCR = preserveCR ? \"&#13;\" : \"\\n\";\r\n            return (\"\" + s) /* Forces the conversion to string. */\r\n                .replace(/&/g, \"&amp;\") /* This MUST be the 1st replacement. */\r\n                .replace(/'/g, \"&apos;\") /* The 4 other predefined entities, required. */\r\n                .replace(/\"/g, \"&quot;\")\r\n                .replace(/</g, \"&lt;\")\r\n                .replace(/>/g, \"&gt;\")\r\n                /*\r\n                You may add other replacements here for HTML only\r\n                (but it's not necessary).\r\n                Or for XML, only if the named entities are defined in its DTD.\r\n                */\r\n                .replace(/\\r\\n/g, preserveCR) /* Must be before the next replacement. */\r\n                .replace(/[\\r\\n]/g, preserveCR);\r\n        }\r\n        public htmlAttrEscape(s: string): string {\r\n            this.escElement.textContent = s;\r\n            s = this.escElement.innerHTML;\r\n            return s.replace(/'/g, \"&apos;\")\r\n                    .replace(/\"/g, \"&quot;\");\r\n        }\r\n        private escElement : HTMLDivElement = document.createElement(\"div\");\r\n\r\n        /**\r\n         * string compare that considers null == \"\"\r\n         */\r\n        public stringCompare(str1: string | null, str2: string | null): boolean {\r\n            if (!str1 && !str2) return true;\r\n            return str1 === str2;\r\n        }\r\n\r\n        // Ajax result handling\r\n\r\n        public processAjaxReturn(result: string, textStatus: string, xhr: XMLHttpRequest, tagInModule?: HTMLElement,\r\n                onSuccessNoData?: () => void,\r\n                onRawDataResult?: (result: string) => void,\r\n                onJSONResult?: (result: any) => void): boolean {\r\n            //if (xhr.responseType != \"json\") throw `processAjaxReturn: unexpected responseType ${xhr.responseType}`;\r\n            try {\r\n                // tslint:disable-next-line:no-eval\r\n                result = <string>eval(result);\r\n            } catch (e) { }\r\n            result = result || \"(??)\";\r\n            if (xhr.status === 200) {\r\n                this.reloadingModuleTagInModule = tagInModule || null;\r\n                if (result.startsWith(YConfigs.Basics.AjaxJavascriptReturn)) {\r\n                    var script = result.substring(YConfigs.Basics.AjaxJavascriptReturn.length);\r\n                    if (script.length === 0) { // all is well, but no script to execute\r\n                        if (onSuccessNoData !== undefined) {\r\n                            onSuccessNoData();\r\n                        }\r\n                    } else {\r\n                        // tslint:disable-next-line:no-eval\r\n                        eval(script);\r\n                    }\r\n                    return true;\r\n                } else if (result.startsWith(YConfigs.Basics.AjaxJSONReturn)) {\r\n                    var json = result.substring(YConfigs.Basics.AjaxJSONReturn.length);\r\n                    if (onJSONResult) {\r\n                        onJSONResult(JSON.parse(json));\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                } else if (result.startsWith(YConfigs.Basics.AjaxJavascriptErrorReturn)) {\r\n                    var script = result.substring(YConfigs.Basics.AjaxJavascriptErrorReturn.length);\r\n                    // tslint:disable-next-line:no-eval\r\n                    eval(script);\r\n                    return false;\r\n                } else if (result.startsWith(YConfigs.Basics.AjaxJavascriptReloadPage)) {\r\n                    var script = result.substring(YConfigs.Basics.AjaxJavascriptReloadPage.length);\r\n                    // tslint:disable-next-line:no-eval\r\n                    eval(script);// if this uses $YetaWF.alert or other \"modal\" calls, the page will reload immediately (use AjaxJavascriptReturn instead and explicitly reload page in your javascript)\r\n                    this.reloadPage(true);\r\n                    return true;\r\n                } else if (result.startsWith(YConfigs.Basics.AjaxJavascriptReloadModule)) {\r\n                    var script = result.substring(YConfigs.Basics.AjaxJavascriptReloadModule.length);\r\n                    // tslint:disable-next-line:no-eval\r\n                    eval(script);// if this uses $YetaWF.alert or other \"modal\" calls, the module will reload immediately (use AjaxJavascriptReturn instead and explicitly reload module in your javascript)\r\n                    this.reloadModule();\r\n                    return true;\r\n                } else if (result.startsWith(YConfigs.Basics.AjaxJavascriptReloadModuleParts)) {\r\n                    //if (!this.isInPopup()) throw \"Not supported - only available within a popup\";/*DEBUG*/\r\n                    var script = result.substring(YConfigs.Basics.AjaxJavascriptReloadModuleParts.length);\r\n                    // tslint:disable-next-line:no-eval\r\n                    eval(script);\r\n                    if (tagInModule)\r\n                        this.refreshModuleByAnyTag(tagInModule);\r\n                    return true;\r\n                } else {\r\n                    if (onRawDataResult !== undefined) {\r\n                        onRawDataResult(result);\r\n                        return true;\r\n                    } else {\r\n                        this.error(YLocs.Basics.IncorrectServerResp);\r\n                    }\r\n                    return false;\r\n                }\r\n            } else if (xhr.status >= 400 && xhr.status <= 499) {\r\n                $YetaWF.alert(YLocs.Forms.AjaxError.format(xhr.status, \"Not Authorized\", YLocs.Forms.AjaxErrorTitle));\r\n                return false;\r\n            } else {\r\n                $YetaWF.alert(YLocs.Forms.AjaxError.format(xhr.status, result, YLocs.Forms.AjaxErrorTitle));\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // JSX\r\n\r\n        /**\r\n         * React-like createElement function so we can use JSX in our TypeScript/JavaScript code.\r\n         */\r\n        public createElement(tag: string, attrs: any, children: any): HTMLElement {\r\n            var element: HTMLElement = document.createElement(tag);\r\n            for (const name in attrs) {\r\n                if (name && attrs.hasOwnProperty(name)) {\r\n                    var value: string | null | boolean = attrs[name];\r\n                    if (value === true) {\r\n                        element.setAttribute(name, name);\r\n                    } else if (value !== false && value != null) {\r\n                        element.setAttribute(name, value.toString());\r\n                    }\r\n                }\r\n            }\r\n            for (let i: number = 2; i < arguments.length; i++) {\r\n                const child: any = arguments[i];\r\n                element.appendChild(\r\n                    child.nodeType == null ?\r\n                        document.createTextNode(child.toString()) : child);\r\n            }\r\n            return element;\r\n        }\r\n\r\n        // Global script eval\r\n\r\n        public runGlobalScript(script: string) : void {\r\n            var elem = document.createElement(\"script\");\r\n            elem.text = script;\r\n\r\n            var newElem = document.head!.appendChild(elem);// add to execute script\r\n            (newElem.parentNode as HTMLElement).removeChild(newElem);// and remove - we're done with it\r\n        }\r\n\r\n        // WhenReady\r\n\r\n        // Usage:\r\n        // $YetaWF.addWhenReady((tag) => {});\r\n\r\n        private whenReady: IWhenReady[] = [];\r\n\r\n        /**\r\n         * Registers a callback that is called when the document is ready (similar to $(document).ready()), after page content is rendered (for dynamic content),\r\n         * or after a partial form is rendered. The callee must honor tag/elem and only manipulate child objects.\r\n         * Callback functions are registered by whomever needs this type of processing. For example, a grid can\r\n         * process all whenReady requests after reloading the grid with data (which doesn't run any javascript automatically).\r\n         * @param def\r\n         */\r\n        public addWhenReady(callback: (section: HTMLElement) => void): void {\r\n            this.whenReady.push({ callback: callback });\r\n        }\r\n\r\n        /**\r\n         * Process all callbacks for the specified element to initialize children. This is used by YetaWF.Core only.\r\n         * @param elem The element for which all callbacks should be called to initialize children.\r\n         */\r\n        public processAllReady(tags?: HTMLElement[]): void {\r\n            if (!tags) {\r\n                tags = [];\r\n                tags.push(document.body);\r\n            }\r\n            if (tags.length === 0) {\r\n                // it may happen that new content becomes available without any tags to update.\r\n                // in that case create a dummy tag so all handlers are called. Some handlers don't use the tag and just need to be notified that \"something\" changed.\r\n                tags.push(document.createElement(\"DIV\")); // dummy element\r\n            }\r\n            for (const entry of this.whenReady) {\r\n                try { // catch errors to insure all callbacks are called\r\n                    for (const tag of tags)\r\n                        entry.callback(tag);\r\n                } catch (err) {\r\n                    console.error(err.message || err);\r\n                }\r\n            }\r\n        }\r\n\r\n        // WhenReadyOnce\r\n\r\n        // Usage:\r\n        // $YetaWF.addWhenReadyOnce((tag) => {})    // function to be called\r\n        private whenReadyOnce: IWhenReady[] = [];\r\n\r\n        /**\r\n         * Registers a callback that is called when the document is ready (similar to $(document).ready()), after page content is rendered (for dynamic content),\r\n         * or after a partial form is rendered. The callee must honor tag/elem and only manipulate child objects.\r\n         * Callback functions are registered by whomever needs this type of processing. For example, a grid can\r\n         * process all whenReadyOnce requests after reloading the grid with data (which doesn't run any javascript automatically).\r\n         * The callback is called for ONCE. Then the callback is removed.\r\n         * @param def\r\n         */\r\n        public addWhenReadyOnce(callback: (section: HTMLElement) => void): void {\r\n            this.whenReadyOnce.push({ callback: callback });\r\n        }\r\n\r\n        /**\r\n         * Process all callbacks for the specified element to initialize children. This is used by YetaWF.Core only.\r\n         * @param elem The element for which all callbacks should be called to initialize children.\r\n         */\r\n        public processAllReadyOnce(tags?: HTMLElement[]): void {\r\n            if (!tags) {\r\n                tags = [];\r\n                tags.push(document.body);\r\n            }\r\n            if (tags.length === 0) {\r\n                // it may happen that new content becomes available without any tags to update.\r\n                // in that case create a dummy tag so all handlers are called. Some handlers don't use the tag and just need to be notified that \"something\" changed.\r\n                tags.push(document.createElement(\"DIV\")); // dummy element\r\n            }\r\n            for (const entry of this.whenReadyOnce) {\r\n                try { // catch errors to insure all callbacks are called\r\n                    for (const tag of tags)\r\n                        entry.callback(tag);\r\n                } catch (err) {\r\n                    console.error(err.message);\r\n                }\r\n            }\r\n            this.whenReadyOnce = [];\r\n        }\r\n\r\n        // ClearDiv\r\n\r\n        private clearDiv: IClearDiv[] = [];\r\n\r\n        /**\r\n         * Registers a callback that is called when a <div> is cleared. This is used so templates can register a cleanup\r\n         * callback so elements can be destroyed when a div is emptied (used by UPS).\r\n         */\r\n        public registerClearDiv(callback: (section: HTMLElement) => void): void {\r\n            this.clearDiv.push({ callback: callback });\r\n        }\r\n\r\n        /**\r\n         * Process all callbacks for the specified element being cleared.\r\n         * @param elem The element being cleared.\r\n         */\r\n        public processClearDiv(tag: HTMLElement): void {\r\n            for (const entry of this.clearDiv) {\r\n                try { // catch errors to insure all callbacks are called\r\n                    if (entry.callback != null)\r\n                        entry.callback(tag);\r\n                } catch (err) {\r\n                    console.error(err.message || err);\r\n                }\r\n            }\r\n            // also release any attached objects\r\n            for (var i = 0; i < this.DataObjectCache.length; ) {\r\n                var doe = this.DataObjectCache[i];\r\n                if (this.getElement1BySelectorCond(`#${doe.DivId}`, [tag])) {\r\n                    if (YConfigs.Basics.DEBUGBUILD) {\r\n                        // tslint:disable-next-line:no-debugger\r\n                        debugger; // if we hit this, there is an object that's not cleaned up by handling processClearDiv in an component specific way\r\n                    }\r\n                    this.DataObjectCache.splice(i, 1);\r\n                    continue;\r\n                }\r\n                ++i;\r\n            }\r\n        }\r\n        public validateObjectCache(): void {\r\n            if (YConfigs.Basics.DEBUGBUILD) {\r\n                //DEBUG ONLY\r\n                for (let doe of this.DataObjectCache) {\r\n                    if (!this.getElement1BySelectorCond(`#${doe.DivId}`)) {\r\n                        // tslint:disable-next-line:no-debugger\r\n                        debugger; // if we hit this, there is an object that has no associated dom element\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Adds an object (a Typescript class) to a tag. Used for cleanup when a parent div is removed.\r\n         * Typically used by templates.\r\n         * Objects attached to divs are terminated by processClearDiv which calls any handlers that registered a\r\n         * template class using addClearDivForObjects.\r\n         * @param tagId - The element id (DOM) where the object is attached\r\n         * @param obj - the object to attach\r\n         */\r\n        public addObjectDataById(tagId: string, obj: any): void {\r\n            this.validateObjectCache();\r\n            this.getElementById(tagId); // used to validate the existence of the element\r\n            var doe = this.DataObjectCache.filter((entry:DataObjectEntry): boolean => entry.DivId === tagId);\r\n            if (doe.length > 0) throw `addObjectDataById - tag with id ${tagId} already has data`;/*DEBUG*/\r\n            this.DataObjectCache.push({ DivId: tagId, Data: obj });\r\n        }\r\n        /**\r\n         * Retrieves a data object (a Typescript class) from a tag\r\n         * @param tagId - The element id (DOM) where the object is attached\r\n         */\r\n        public getObjectDataById(tagId: string): any {\r\n            this.getElementById(tagId); // used to validate the existence of the element\r\n            var doe = this.DataObjectCache.filter((entry: DataObjectEntry): boolean => entry.DivId === tagId);\r\n            if (doe.length === 0)\r\n                throw `getObjectDataById - tag with id ${tagId} doesn't have any data`;/*DEBUG*/\r\n            return doe[0].Data;\r\n        }\r\n        /**\r\n         * Retrieves a data object (a Typescript class) from a tag\r\n         * @param tagId - The element id (DOM) where the object is attached\r\n         */\r\n        public getObjectData(element: HTMLElement): any {\r\n            if (!element.id)\r\n                throw `element without id - ${element.outerHTML}`;\r\n            return this.getObjectDataById(element.id);\r\n        }\r\n        /**\r\n         * Removes a data object (a Typescript class) from a tag.\r\n         * @param tagId - The element id (DOM) where the object is attached\r\n         */\r\n        public removeObjectDataById(tagId: string): void {\r\n            this.validateObjectCache();\r\n            this.getElementById(tagId); // used to validate the existence of the element\r\n            for (var i = 0; i < this.DataObjectCache.length; ++i) {\r\n                var doe = this.DataObjectCache[i];\r\n                if (doe.DivId === tagId) {\r\n                    this.DataObjectCache.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n            throw `Element with id ${tagId} doesn't have attached data`;/*DEBUG*/\r\n        }\r\n\r\n        private DataObjectCache: DataObjectEntry[] = [];\r\n\r\n        // Selectors\r\n\r\n        /**\r\n         * Get an element by id.\r\n         */\r\n        public getElementById(elemId: string): HTMLElement {\r\n            var div: HTMLElement = document.querySelector(`#${elemId}`) as HTMLElement;\r\n            if (!div)\r\n                throw `Element with id ${elemId} not found`;/*DEBUG*/\r\n            return div;\r\n        }\r\n        /**\r\n         * Get an element by id.\r\n         */\r\n        public getElementByIdCond(elemId: string): HTMLElement | null {\r\n            var div: HTMLElement = document.querySelector(`#${elemId}`) as HTMLElement;\r\n            return div;\r\n        }\r\n        /**\r\n         * Get elements from an array of tags by selector. (similar to jquery var x = $(selector, elems); with standard css selectors)\r\n         */\r\n        public getElementsBySelector(selector: string, elems?: HTMLElement[]): HTMLElement[] {\r\n            var all: HTMLElement[] = [];\r\n            if (!elems)\r\n                elems = [document.body];\r\n            for (const elem of elems) {\r\n                var list: NodeListOf<Element> = elem.querySelectorAll(selector);\r\n                var len: number = list.length;\r\n                for (var i: number = 0; i < len; ++i) {\r\n                    all.push(list[i] as HTMLElement);\r\n                }\r\n            }\r\n            return all;\r\n        }\r\n        /**\r\n         * Get the first element from an array of tags by selector. (similar to jquery var x = $(selector, elems); with standard css selectors)\r\n         */\r\n        public getElement1BySelectorCond(selector: string, elems?: HTMLElement[]): HTMLElement | null {\r\n            if (!elems)\r\n                elems = [document.body];\r\n            for (const elem of elems) {\r\n                var list: NodeListOf<Element> = elem.querySelectorAll(selector);\r\n                if (list.length > 0)\r\n                    return list[0] as HTMLElement;\r\n            }\r\n            return null;\r\n        }\r\n        /**\r\n         * Get the first element from an array of tags by selector. (similar to jquery var x = $(selector, elems); with standard css selectors)\r\n         */\r\n        public getElement1BySelector(selector: string, elems?: HTMLElement[]): HTMLElement {\r\n            var elem = this.getElement1BySelectorCond(selector, elems);\r\n            if (elem == null)\r\n                throw `Element with selector ${selector} not found`;\r\n            return elem;\r\n        }\r\n        /**\r\n         * Removes all input[type='hidden'] fields. (similar to jquery var x = elems.not(\"input[type='hidden']\"); )\r\n         */\r\n        public limitToNotTypeHidden(elems: HTMLElement[]): HTMLElement[] {\r\n            var all: HTMLElement[] = [];\r\n            for (const elem of elems) {\r\n                if (elem.tagName !== \"INPUT\" || elem.getAttribute(\"type\") !== \"hidden\")\r\n                    all.push(elem);\r\n            }\r\n            return all;\r\n        }\r\n        /**\r\n         * Returns items that are visible. (similar to jquery var x = elems.filter(':visible'); )\r\n         */\r\n        public limitToVisibleOnly(elems: HTMLElement[]): HTMLElement[] {\r\n            var all: HTMLElement[] = [];\r\n            for (const elem of elems) {\r\n                if (this.isVisible(elem))\r\n                    all.push(elem);\r\n            }\r\n            return all;\r\n        }\r\n        /**\r\n         * Returns whether the specified element is visible.\r\n         */\r\n        public isVisible(elem: HTMLElement): boolean {\r\n            return (elem.clientWidth > 0 && elem.clientHeight > 0);\r\n        }\r\n\r\n        /**\r\n         * Returns whether the specified element is a parent of the specified child element.\r\n         */\r\n        public elementHas(elem: HTMLElement, childElement: HTMLElement): boolean {\r\n            var c : HTMLElement | null = childElement;\r\n            for (; c ;) {\r\n                if (elem === c)\r\n                    return true;\r\n                c = c.parentElement;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Tests whether the specified element matches the selector.\r\n         * @param elem - The element to test.\r\n         * @param selector - The selector to match.\r\n         */\r\n        public elementMatches(elem: Element | null, selector: string): boolean {\r\n            if (elem)\r\n                return elem.matches(selector);\r\n            return false;\r\n        }\r\n        /**\r\n         * Finds the closest element up the DOM hierarchy that matches the selector (including the starting element)\r\n         * @param elem - The element to test.\r\n         * @param selector - The selector to match.\r\n         */\r\n        public elementClosestCond(elem: HTMLElement, selector: string): HTMLElement | null {\r\n            var e: HTMLElement | null = elem;\r\n            while (e) {\r\n                if (this.elementMatches(e, selector))\r\n                    return e;\r\n                else\r\n                    e = e.parentElement;\r\n            }\r\n            return null;\r\n        }\r\n        /**\r\n         * Finds the closest element up the DOM hierarchy that matches the selector (including the starting element)\r\n         * @param elem - The element to test.\r\n         * @param selector - The selector to match.\r\n         */\r\n        public elementClosest(elem: HTMLElement, selector: string): HTMLElement {\r\n            var e = this.elementClosestCond(elem, selector);\r\n            if (!e)\r\n                throw `Closest parent element with selector ${selector} not found`;\r\n            return e;\r\n        }\r\n\r\n        // DOM manipulation\r\n\r\n        /**\r\n         * Removes the specified element.\r\n         * @param elem - The element to remove.\r\n         */\r\n        public removeElement(elem: HTMLElement): void {\r\n            if (!elem.parentElement) return;\r\n            elem.parentElement.removeChild(elem);\r\n        }\r\n\r\n        /**\r\n         * Append content to the specified element. The content is html and optional <script> tags. The scripts are executed after the content is added.\r\n         */\r\n        public appendMixedHTML(elem: HTMLElement, content: string, tableBody?: boolean): void {\r\n            this.calcMixedHTMLRunScripts(content, undefined, (elems: HTMLCollection): void => {\r\n                while (elems.length > 0)\r\n                    elem.insertAdjacentElement(\"beforeend\", elems[0]);\r\n            }, tableBody);\r\n        }\r\n\r\n        /**\r\n         * Set the specified element's outerHMTL to the content. The content is html and optional <script> tags. The scripts are executed after the content is added.\r\n         */\r\n        public setMixedOuterHTML(elem: HTMLElement, content: string, tableBody?: boolean): void {\r\n            this.calcMixedHTMLRunScripts(content, (html: string): void => {\r\n                elem.outerHTML = content;\r\n            }, undefined, tableBody);\r\n        }\r\n\r\n        private calcMixedHTMLRunScripts(content: string, callbackHTML?: (html: string) => void, callbackChildren?: (elems: HTMLCollection) => void, tableBody?: boolean): void {\r\n\r\n            // convert the string to DOM representation\r\n            var temp = document.createElement(\"YetaWFTemp\");\r\n            if (tableBody) {\r\n                temp.innerHTML = `<table><tbody>${content}</tbody></table>`;\r\n                temp = $YetaWF.getElement1BySelector(\"tbody\", [temp]);\r\n            } else {\r\n                temp.innerHTML = content;\r\n            }\r\n            // extract all <script> tags\r\n            var scripts: HTMLScriptElement[] = this.getElementsBySelector(\"script\", [temp]) as HTMLScriptElement[];\r\n            for (var script of scripts) {\r\n                this.removeElement(script); // remove the script element\r\n            }\r\n\r\n            // call callback so caller can update whatever needs to be updated\r\n            if (callbackHTML)\r\n                callbackHTML(temp.innerHTML);\r\n            else if (callbackChildren)\r\n                callbackChildren(temp.children);\r\n\r\n            // now run/load all scripts we found in the HTML\r\n            for (var script of scripts) {\r\n                if (script.src) {\r\n                    script.async = false;\r\n                    script.defer = false;\r\n                    var js = document.createElement(\"script\");\r\n                    js.type = \"text/javascript\";\r\n                    js.async = false; // need to preserve execution order\r\n                    js.defer = false;\r\n                    js.src = script.src;\r\n                    document.body.appendChild(js);\r\n                } else\r\n                    this.runGlobalScript(script.innerHTML);\r\n            }\r\n        }\r\n\r\n        // Element Css\r\n\r\n        /**\r\n         * Tests whether the specified element has the given css class.\r\n         * @param elem The element to test.\r\n         * @param css - The css class being tested.\r\n         */\r\n        public elementHasClass(elem: Element | null, css: string): boolean {\r\n            css = css.trim();\r\n            if (!elem) return false;\r\n            if (elem.classList)\r\n                return elem.classList.contains(css);\r\n            else\r\n                return new RegExp(\"(^| )\" + css + \"( |$)\", \"gi\").test(elem.className);\r\n        }\r\n        /**\r\n         * Add a space separated list of css classes to an element.\r\n         */\r\n        public elementAddClasses(elem: Element, classNames: string | null): void {\r\n            if (!classNames) return;\r\n            for (var s of classNames.split(\" \")) {\r\n                if (s.length > 0)\r\n                    this.elementAddClass(elem, s);\r\n            }\r\n        }\r\n        /**\r\n         * Add css class to an element.\r\n         */\r\n        public elementAddClass(elem: Element, className: string): void {\r\n            if (elem.classList)\r\n                elem.classList.add(className);\r\n            else\r\n                elem.className += \" \" + className;\r\n        }\r\n        /**\r\n         * Remove a space separated list of css classes from an element.\r\n         */\r\n        public elementRemoveClasses(elem: Element, classNames: string | null): void {\r\n            if (!classNames) return;\r\n            for (var s of classNames.split(\" \")) {\r\n                if (s.length > 0)\r\n                    this.elementRemoveClass(elem, s);\r\n            }\r\n        }\r\n        /**\r\n         * Remove a css class from an element.\r\n         */\r\n        public elementRemoveClass(elem: Element, className: string): void {\r\n            if (elem.classList)\r\n                elem.classList.remove(className);\r\n            else\r\n                elem.className = elem.className.replace(new RegExp(\"(^|\\\\b)\" + className.split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"), \" \");\r\n        }\r\n        /*\r\n         * Add/remove a class to an element.\r\n         */\r\n        public elementToggleClass(elem: Element, className: string, set: boolean): void {\r\n            if (set) {\r\n                if (this.elementHasClass(elem, className))\r\n                    return;\r\n                this.elementAddClass(elem, className);\r\n            } else {\r\n                this.elementRemoveClass(elem, className);\r\n            }\r\n        }\r\n\r\n        // Attributes\r\n\r\n        /**\r\n         * Returns an attribute value. Throws an error if the attribute doesn't exist.\r\n         */\r\n        public getAttribute(elem: HTMLElement, name: string): string {\r\n            var val = elem.getAttribute(name);\r\n            if (!val) throw `missing ${name} attribute`;\r\n            return val;\r\n        }\r\n        /**\r\n         * Returns an attribute value.\r\n         */\r\n        public getAttributeCond(elem: HTMLElement, name: string): string | null {\r\n            return elem.getAttribute(name);\r\n        }\r\n        /**\r\n         * Sets an attribute.\r\n         */\r\n        public setAttribute(elem: HTMLElement, name: string, value: string): void {\r\n            elem.setAttribute(name, value);\r\n        }\r\n        /**\r\n         * Enable element.\r\n         */\r\n        public elementEnable(elem: HTMLElement): void {\r\n            elem.removeAttribute(\"disabled\");\r\n        }\r\n        /**\r\n         * Disable element.\r\n         */\r\n        public elementDisable(elem: HTMLElement): void {\r\n            elem.setAttribute(\"disabled\", \"disabled\");\r\n        }\r\n        /**\r\n         * Enable or disable element.\r\n         */\r\n        public elementEnableToggle(elem: HTMLElement, enable: boolean): void {\r\n            if (enable)\r\n                this.elementEnable(elem);\r\n            else\r\n                this.elementDisable(elem);\r\n        }\r\n        /**\r\n         * Enable element and all child items.\r\n         */\r\n        public elementAndChildrenEnable(elem: HTMLElement): void {\r\n            var children = $YetaWF.getElementsBySelector(\"input,select,textarea\", [elem]);\r\n            for (let child of children) {\r\n                child.removeAttribute(\"disabled\");\r\n                YetaWF_BasicsImpl.elementEnableToggle(child, true);\r\n            }\r\n        }\r\n        /**\r\n         * Disable element and all child items.\r\n         */\r\n        public elementAndChildrenDisable(elem: HTMLElement): void {\r\n            var children = $YetaWF.getElementsBySelector(\"input,select,textarea\", [elem]);\r\n            for (let child of children) {\r\n                child.setAttribute(\"disabled\", \"disabled\");\r\n                YetaWF_BasicsImpl.elementEnableToggle(child, false);\r\n            }\r\n        }\r\n        /**\r\n         * Enable or disable element and all child items.\r\n         */\r\n        public elementAndChildrenEnableToggle(elem: HTMLElement, enable: boolean): void {\r\n            if (enable)\r\n                this.elementAndChildrenEnable(elem);\r\n            else\r\n                this.elementAndChildrenDisable(elem);\r\n        }\r\n\r\n        // Events\r\n\r\n        public registerDocumentReady(callback: () => void): void {\r\n            if ((document as any).attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\r\n                callback();\r\n            } else {\r\n                document.addEventListener(\"DOMContentLoaded\", callback);\r\n            }\r\n        }\r\n\r\n        public registerEventHandlerBody<K extends keyof HTMLElementEventMap>(eventName: K, selector: string | null, callback: (ev: HTMLElementEventMap[K]) => boolean): void {\r\n            if (!document.body) {\r\n                $YetaWF.addWhenReadyOnce((tag: HTMLElement): void => {\r\n                    this.registerEventHandler(document.body, eventName, selector, callback);\r\n                });\r\n            } else {\r\n                this.registerEventHandler(document.body, eventName, selector, callback);\r\n            }\r\n        }\r\n        public registerMultipleEventHandlersBody(eventNames: string[], selector: string | null, callback: (ev: Event) => boolean): void {\r\n            if (!document.body) {\r\n                $YetaWF.addWhenReadyOnce((tag: HTMLElement): void => {\r\n                    for (let eventName of eventNames) {\r\n                        document.body.addEventListener(eventName, (ev: Event) => this.handleEvent(document.body, ev, selector, callback));\r\n                    }\r\n                });\r\n            } else {\r\n                for (let eventName of eventNames) {\r\n                    document.body.addEventListener(eventName, (ev: Event) => this.handleEvent(document.body, ev, selector, callback));\r\n                }\r\n            }\r\n        }\r\n        public registerEventHandlerDocument<K extends keyof DocumentEventMap>(eventName: K, selector: string | null, callback: (ev: DocumentEventMap[K]) => boolean): void {\r\n            document.addEventListener(eventName, (ev: DocumentEventMap[K]) => this.handleEvent(null, ev, selector, callback));\r\n        }\r\n        public registerMultipleEventHandlersDocument(eventNames: string[], selector: string | null, callback: (ev: Event) => boolean): void {\r\n            for (let eventName of eventNames) {\r\n                document.addEventListener(eventName, (ev: Event) => this.handleEvent(null, ev, selector, callback));\r\n            }\r\n        }\r\n        public registerEventHandlerWindow<K extends keyof WindowEventMap>(eventName: K, selector: string | null, callback: (ev: WindowEventMap[K]) => boolean): void {\r\n            window.addEventListener(eventName, (ev: WindowEventMap[K]) => this.handleEvent(null, ev, selector, callback));\r\n        }\r\n        public registerEventHandler<K extends keyof HTMLElementEventMap>(tag: HTMLElement, eventName: K, selector: string | null, callback: (ev: HTMLElementEventMap[K]) => boolean): void {\r\n            tag.addEventListener(eventName, (ev: HTMLElementEventMap[K]) => this.handleEvent(tag, ev, selector, callback));\r\n        }\r\n        public registerMultipleEventHandlers(tags: (HTMLElement|null)[], eventNames: string[], selector: string | null, callback: (ev: Event) => boolean): void {\r\n            for (let tag of tags) {\r\n                if (tag) {\r\n                    for (let eventName of eventNames) {\r\n                        tag.addEventListener(eventName, (ev: Event) => this.handleEvent(tag, ev, selector, callback));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        public registerCustomEventHandlerDocument(eventName: string, selector: string | null, callback: (ev: Event) => boolean): void {\r\n            document.addEventListener(eventName, (ev: Event) => this.handleEvent(null, ev, selector, callback));\r\n        }\r\n        public registerCustomEventHandler(control: ComponentBaseImpl, eventName: string, callback: (ev: Event) => void): void {\r\n            control.Control.addEventListener(eventName, (ev: Event) => callback(ev));\r\n        }\r\n        public registerMultipleCustomEventHandlers(controls: (ComponentBaseImpl|null)[], eventNames: string[], callback: (ev: Event) => void): void {\r\n            for (let control of controls) {\r\n                if (control) {\r\n                    for (let eventName of eventNames) {\r\n                        control.Control.addEventListener(eventName, (ev: Event) => callback(ev));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        private handleEvent(listening: HTMLElement | null, ev: Event, selector: string | null, callback: (ev: Event) => boolean): void {\r\n            // about event handling https://www.sitepoint.com/event-bubbling-javascript/\r\n            //console.log(`event ${ev.type} selector ${selector} target ${(ev.target as HTMLElement).outerHTML}`);\r\n            var elem: HTMLElement | null = ev.target as HTMLElement | null;\r\n            if (ev.eventPhase === ev.CAPTURING_PHASE) {\r\n                if (selector) return;// if we have a selector we can't possibly have a match because the src element is the main tag where we registered the listener\r\n            } else if (ev.eventPhase === ev.AT_TARGET) {\r\n                if (selector) return;// if we have a selector we can't possibly have a match because the src element is the main tag where we registered the listener\r\n            } else if (ev.eventPhase === ev.BUBBLING_PHASE) {\r\n                if (selector) {\r\n                    // check elements between the one that caused the event and the listening element (inclusive) for a match to the selector\r\n                    while (elem) {\r\n                        if (this.elementMatches(elem, selector))\r\n                            break;\r\n                        if (listening === elem)\r\n                            return;// checked all elements\r\n                        elem = elem.parentElement;\r\n                    }\r\n                } else {\r\n                    // check whether the target or one of its parents is the listening element\r\n                    while (elem) {\r\n                        if (listening === elem)\r\n                            break;\r\n                        elem = elem.parentElement;\r\n                    }\r\n                }\r\n                if (!elem)\r\n                    return;\r\n            } else\r\n                return;\r\n            //console.log(`event ${ev.type} selector ${selector} match`);\r\n            ev.__YetaWFElem = (elem || ev.target) as HTMLElement;// pass the matching element to the callback\r\n            var result: boolean = callback(ev);\r\n            if (!result) {\r\n                //console.log(`event ${ev.type} selector ${selector} stop bubble`);\r\n                ev.stopPropagation();\r\n                ev.preventDefault();\r\n            }\r\n        }\r\n        public handleInputReturnKeyForButton(input: HTMLInputElement, button: HTMLInputElement): void {\r\n            $YetaWF.registerEventHandler(input, \"keydown\", null, (ev: KeyboardEvent): boolean => {\r\n                if (ev.keyCode === 13) {\r\n                    button.click();\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        // CONTENTCHANGE\r\n        // CONTENTCHANGE\r\n        // CONTENTCHANGE\r\n\r\n        private ContentChangeHandlers: ContentChangeEntry[] = [];\r\n\r\n        public registerContentChange(callback: (addonGuid: string, on: boolean) => void): void {\r\n            this.ContentChangeHandlers.push({ callback: callback });\r\n        }\r\n        public processContentChange(addonGuid: string, on: boolean): void {\r\n            for (var entry of this.ContentChangeHandlers) {\r\n                entry.callback(addonGuid, on);\r\n            }\r\n        }\r\n\r\n        // PANELSWITCHED\r\n        // PANELSWITCHED\r\n        // PANELSWITCHED\r\n\r\n        private PanelSwitchedHandlers: PanelSwitchedEntry[] = [];\r\n\r\n        /**\r\n         * Register a callback to be called when a panel in a tab control has become active (i.e., visible).\r\n         */\r\n        public registerPanelSwitched(callback: (panel: HTMLElement) => void): void {\r\n            this.PanelSwitchedHandlers.push({ callback: callback });\r\n        }\r\n        /**\r\n         * Called to call all registered callbacks when a panel in a tab control has become active (i.e., visible).\r\n         */\r\n        public processPanelSwitched(panel: HTMLElement): void {\r\n            for (const entry of this.PanelSwitchedHandlers) {\r\n                entry.callback(panel);\r\n            }\r\n        }\r\n\r\n        // ACTIVATEDIV\r\n        // ACTIVATEDIV\r\n        // ACTIVATEDIV\r\n\r\n        private ActivateDivHandlers: ActivateDivEntry[] = [];\r\n\r\n        /**\r\n         * Register a callback to be called when a <div> (or any tag) page has become active (i.e., visible).\r\n         */\r\n        public registerActivateDiv(callback: (tag: HTMLElement) => void): void {\r\n            this.ActivateDivHandlers.push({ callback: callback });\r\n        }\r\n        /**\r\n         * Called to call all registered callbacks when a <div> (or any tag) page has become active (i.e., visible).\r\n         */\r\n        public processActivateDivs(tags: HTMLElement[]): void {\r\n            for (const entry of this.ActivateDivHandlers) {\r\n                for (const tag of tags)\r\n                    entry.callback(tag);\r\n            }\r\n        }\r\n\r\n        // NEWPAGE\r\n        // NEWPAGE\r\n        // NEWPAGE\r\n\r\n        private NewPageHandlers: NewPageEntry[] = [];\r\n\r\n        /**\r\n         * Register a callback to be called when a new page has become active.\r\n         */\r\n        public registerNewPage(callback: (url: string) => void): void {\r\n            this.NewPageHandlers.push({ callback: callback });\r\n        }\r\n        /**\r\n         * Called to call all registered callbacks when a new page has become active.\r\n         */\r\n        public processNewPage(url: string): void {\r\n            for (var entry of this.NewPageHandlers) {\r\n                entry.callback(url);\r\n            }\r\n        }\r\n\r\n        // PAGECHANGE\r\n        // PAGECHANGE\r\n        // PAGECHANGE\r\n\r\n        private PageChangeHandlers: PageChangeEntry[] = [];\r\n\r\n        /**\r\n         * Register a callback to be called when the current page is going away (about to be replaced by a new page).\r\n         */\r\n        public registerPageChange(callback: () => void): void {\r\n            this.PageChangeHandlers.push({ callback: callback });\r\n        }\r\n        /**\r\n         * Called to call all registered callbacks when the current page is going away (about to be replaced by a new page).\r\n         */\r\n        public processPageChange(): void {\r\n            for (var entry of this.PageChangeHandlers) {\r\n                entry.callback();\r\n            }\r\n        }\r\n\r\n        // Expand/collapse Support\r\n\r\n        /**\r\n         * Expand/collapse support using 2 action links (Name=Expand/Collapse) which make 2 divs hidden/visible  (alternating)\r\n         * @param divId The <div> containing the 2 action links.\r\n         * @param collapsedId - The <div> to hide/show.\r\n         * @param expandedId - The <div> to show/hide.\r\n         */\r\n        public expandCollapseHandling(divId: string, collapsedId: string, expandedId: string): void {\r\n            var div = this.getElementById(divId);\r\n            var collapsedDiv = this.getElementById(collapsedId);\r\n            var expandedDiv = this.getElementById(expandedId);\r\n\r\n            var expLink = this.getElement1BySelector(\"a[data-name='Expand']\", [div]);\r\n            var collLink = this.getElement1BySelector(\"a[data-name='Collapse']\", [div]);\r\n\r\n            this.registerEventHandler(expLink, \"click\", null, (ev: Event) => {\r\n                collapsedDiv.style.display = \"none\";\r\n                expandedDiv.style.display = \"\";\r\n                // init any controls that just became visible\r\n                this.processActivateDivs([expandedDiv]);\r\n                return true;\r\n            });\r\n            this.registerEventHandler(collLink, \"click\", null, (ev: Event) => {\r\n                collapsedDiv.style.display = \"\";\r\n                expandedDiv.style.display = \"none\";\r\n                return true;\r\n            });\r\n        }\r\n\r\n        constructor() {\r\n\r\n            $YetaWF = this;// set global so we can initialize anchor/content\r\n            this.AnchorHandling = new YetaWF.Anchors();\r\n            this.ContentHandling = new YetaWF.Content();\r\n\r\n        }\r\n\r\n        public init(): void {\r\n\r\n            this.AnchorHandling.init();\r\n            this.ContentHandling.init();\r\n\r\n            // screen size yCondense/yNoCondense support\r\n\r\n            this.registerEventHandlerWindow(\"resize\", null, (ev: UIEvent) => {\r\n                this.setCondense(document.body, window.innerWidth);\r\n                return true;\r\n            });\r\n\r\n            this.registerDocumentReady(() => {\r\n                this.setCondense(document.body, window.innerWidth);\r\n            });\r\n\r\n            // Navigation\r\n\r\n            this.registerEventHandlerWindow(\"popstate\", null, (ev: PopStateEvent) => {\r\n                if (this.suppressPopState > 0) {\r\n                    --this.suppressPopState;\r\n                    return true;\r\n                }\r\n                var uri = this.parseUrl(window.location.href);\r\n                return !this.ContentHandling.setContent(uri, false);\r\n            });\r\n\r\n            // <a> links that only have a hash are intercepted so we don't go through content handling\r\n            this.registerEventHandlerBody(\"click\", \"a[href^='#']\", (ev: MouseEvent) => {\r\n\r\n                // find the real anchor, ev.target was clicked, but it may not be the anchor itself\r\n                if (!ev.target) return true;\r\n                var anchor = $YetaWF.elementClosestCond(ev.target as HTMLElement, \"a\") as HTMLAnchorElement;\r\n                if (!anchor) return true;\r\n\r\n                ++this.suppressPopState;\r\n                setTimeout((): void => {\r\n                    if (this.suppressPopState > 0)\r\n                        --this.suppressPopState;\r\n                }, 200);\r\n                return true;\r\n            });\r\n\r\n            // <A> links\r\n\r\n            // WhenReady\r\n\r\n            this.registerDocumentReady(() => {\r\n                this.processAllReady();\r\n                this.processAllReadyOnce();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Basic services available throughout YetaWF.\r\n */\r\nvar $YetaWF = new YetaWF.BasicsServices();"]}