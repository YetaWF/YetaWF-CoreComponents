{"version":3,"sources":["AddOns/YetaWF/Core/_Addons/Forms/Forms.ts"],"names":[],"mappings":"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","file":"Forms.d.ts","sourcesContent":["/* Copyright Â© 2019 Softel vdm, Inc. - https://yetawf.com/Documentation/YetaWF/Licensing */\r\n\r\n/* Forms API, to be implemented by rendering-specific code - rendering code must define a YetaWF_FormsImpl object implementing IFormsImpl */\r\n\r\ndeclare var YetaWF_FormsImpl: YetaWF.IFormsImpl;\r\n\r\nnamespace YetaWF {\r\n\r\n    export interface IFormsImpl {\r\n        /**\r\n         * Initializes a partialform.\r\n         */\r\n        initPartialForm(partialForm: HTMLElement): void;\r\n        /**\r\n         * Validates one elements.\r\n         */\r\n        validateElement(ctrl: HTMLElement): void;\r\n        /**\r\n         * Re-validate all fields within the div, typically used after paging in a grid to let jquery.validate update all fields\r\n         */\r\n        updateValidation(div: HTMLElement): void;\r\n        /**\r\n         * Returns whether a div has form errors.\r\n         */\r\n        hasErrors(elem: HTMLElement): boolean;\r\n        /**\r\n         * Shows all div form errors in a popup.\r\n         */\r\n        showErrors(elem: HTMLElement): void;\r\n\r\n        /**\r\n         * Validate all fields in the current form.\r\n         */\r\n        validate(form: HTMLFormElement): void;\r\n        /**\r\n         * Returns whether all fields in the current form are valid.\r\n         */\r\n        isValid(form: HTMLFormElement): boolean;\r\n        /**\r\n         * Serializes the form and returns a name/value pairs array\r\n         */\r\n        serializeFormArray(form: HTMLFormElement): NameValuePair[];\r\n        /**\r\n         * If there is a validation in the specified tab control, the tab is activated.\r\n         */\r\n        setErrorInTab(tabctrl: HTMLElement): void;\r\n    }\r\n\r\n    export interface NameValuePair {\r\n        name: string;\r\n        value: string;\r\n    }\r\n\r\n    export interface IVolatile {\r\n        Forms: IVolatileForms;\r\n    }\r\n    export interface IVolatileForms {\r\n        TabStyle: TabStyleEnum;\r\n    }\r\n    export enum TabStyleEnum {\r\n        JQuery = 0,\r\n        Kendo = 1,\r\n    }\r\n\r\n    export interface IConfigs {\r\n        Forms: IConfigsForms;\r\n    }\r\n    export interface IConfigsForms {\r\n\r\n        // Global form related items (not implementation specific)\r\n        UniqueIdPrefix: string;\r\n        RequestVerificationToken: string;\r\n\r\n        // Validation (not implementation specific) used by validation attributes\r\n        ConditionPropertyName: string;\r\n        ConditionPropertyValue: string;\r\n        ConditionPropertyValueLow: string;\r\n        ConditionPropertyValueHigh: string;\r\n\r\n        // Css used which is global to YetaWF (not implementation specific)\r\n\r\n        CssFormPartial: string;\r\n        CssFormAjax: string;\r\n        CssFormNoSubmit: string;\r\n        CssFormNoValidate: string;\r\n        CssFormNoSubmitContents: string;\r\n        CssFormCancel: string;\r\n        CssDataApplyButton: string;\r\n        CssWarningIcon: string;\r\n\r\n        CssWarningIconUrl: string;\r\n    }\r\n    export interface ILocs {\r\n        Forms: ILocsForms;\r\n    }\r\n    export interface ILocsForms {\r\n        AjaxError: string;\r\n        AjaxErrorTitle: string;\r\n        FormErrors: string;\r\n    }\r\n\r\n    export interface SubmitHandlerEntry {\r\n        form: HTMLElement | null;   // form <div> to be processed\r\n        callback: (entry: SubmitHandlerEntry) => void; // function to be called - the callback returns extra data appended to the submit url\r\n        userdata: any;              // any data suitable to callback\r\n    }\r\n    export interface FormInfo {\r\n        RequestVerificationToken: string;\r\n        UniqueIdPrefix: string;\r\n        ModuleGuid: string;\r\n        CharInfo: string;\r\n        QS: string;\r\n    }\r\n\r\n    export class Forms {\r\n\r\n        // Partial Form\r\n\r\n        /**\r\n         * Initialize a partial form.\r\n         */\r\n        public initPartialForm(elemId: string): void {\r\n\r\n            var partialForm = $YetaWF.getElementById(elemId);\r\n\r\n            // run registered actions (usually javascript initialization, similar to $doc.ready()\r\n            $YetaWF.processAllReady([partialForm]);\r\n            $YetaWF.processAllReadyOnce([partialForm]);\r\n\r\n            YetaWF_FormsImpl.initPartialForm(partialForm);\r\n\r\n            // show error popup\r\n            var hasErrors = this.hasErrors(partialForm);\r\n            if (hasErrors)\r\n                this.showErrors(partialForm);\r\n        }\r\n        /**\r\n         * Validates one elements.\r\n         */\r\n        public validateElement(ctrl: HTMLElement): void {\r\n            YetaWF_FormsImpl.validateElement(ctrl);\r\n        }\r\n        /**\r\n         * Re-validate all fields within the div, typically used after paging in a grid to let jquery.validate update all fields\r\n         */\r\n        public updateValidation(div: HTMLElement): void {\r\n            YetaWF_FormsImpl.updateValidation(div);\r\n        }\r\n        /**\r\n         * Returns whether the form has errors.\r\n         */\r\n        public hasErrors(elem: HTMLElement): boolean {\r\n            return YetaWF_FormsImpl.hasErrors(elem);\r\n        }\r\n        /**\r\n         * Shows all form errors in a popup.\r\n         */\r\n        public showErrors(elem: HTMLElement): void {\r\n            YetaWF_FormsImpl.showErrors(elem);\r\n        }\r\n        /**\r\n         * Serializes the form and returns a name/value pairs array\r\n         */\r\n        public serializeFormArray(form: HTMLFormElement): NameValuePair[] {\r\n            return YetaWF_FormsImpl.serializeFormArray(form);\r\n        }\r\n        /**\r\n         * Validate all fields in the current form.\r\n         */\r\n        public validate(form: HTMLFormElement): void {\r\n            YetaWF_FormsImpl.validate(form);\r\n        }\r\n        /**\r\n         * Returns whether all fields in the current form are valid.\r\n         */\r\n        public isValid(form: HTMLFormElement): boolean {\r\n            return YetaWF_FormsImpl.isValid(form);\r\n        }\r\n\r\n        // Submit\r\n\r\n        public DATACLASS: string = \"yetawf_forms_data\"; // add divs with this class to form for any data that needs to be submitted (will be removed before calling (pre)submit handlers.\r\n\r\n        public submit(form: HTMLFormElement, useValidation: boolean, extraData?: string, successFunc?: (hasErrors: boolean) => void, failFunc?: () => void) : void  {\r\n\r\n            if (!form.getAttribute(\"method\")) return; // no method, don't submit\r\n\r\n            var divs = $YetaWF.getElementsBySelector(\"div.\" + this.DATACLASS);\r\n            for (let div of divs)\r\n                $YetaWF.removeElement(div);\r\n\r\n            if (useValidation)\r\n                this.validate(form);\r\n\r\n            $YetaWF.closeOverlays();\r\n            $YetaWF.setLoading(true);\r\n\r\n            if (!useValidation || this.isValid(form)) {\r\n\r\n                var onSubmitExtraData = extraData ? extraData : \"\";\r\n                onSubmitExtraData = this.callPreSubmitHandler(form, onSubmitExtraData);\r\n\r\n                // serialize the form\r\n                var formData = this.serializeForm(form);\r\n                // add extra data\r\n                if (onSubmitExtraData)\r\n                    formData = onSubmitExtraData + \"&\" + formData;\r\n                // add the origin list in case we need to navigate back\r\n                var originList = YVolatile.Basics.OriginList;\r\n                if (form.getAttribute(YConfigs.Basics.CssSaveReturnUrl) !== null) {// form says we need to save the return address on submit\r\n                    var currUri = $YetaWF.parseUrl(window.location.href);\r\n                    currUri.removeSearch(YConfigs.Basics.Link_OriginList);// remove originlist from current URL\r\n                    currUri.removeSearch(YConfigs.Basics.Link_InPopup);// remove popup info from current URL\r\n                    originList = YVolatile.Basics.OriginList.slice(0);// copy saved originlist\r\n                    var newOrigin = { Url: currUri.toUrl(), EditMode: YVolatile.Basics.EditModeActive, InPopup: $YetaWF.isInPopup() };\r\n                    originList.push(newOrigin);\r\n                    if (originList.length > 5)// only keep the last 5 urls\r\n                        originList = originList.slice(originList.length - 5);\r\n                }\r\n                // include the character dimension info\r\n                {\r\n                    var charSize = $YetaWF.getCharSizeFromTag(form);\r\n                    formData = formData + \"&\" + YConfigs.Basics.Link_CharInfo + \"=\" + charSize.width.toString() + \",\" + charSize.height.toString();\r\n                }\r\n\r\n                formData = formData + \"&\" + YConfigs.Basics.Link_OriginList + \"=\" + encodeURIComponent(JSON.stringify(originList));\r\n                // add the status of the Pagecontrol\r\n                if (YVolatile.Basics.PageControlVisible)\r\n                    formData = formData + \"&\" + YConfigs.Basics.Link_PageControl + \"=y\";\r\n                // add if we're in a popup\r\n                if ($YetaWF.isInPopup())\r\n                    formData = formData + \"&\" + YConfigs.Basics.Link_InPopup + \"=y\";\r\n\r\n                var request: XMLHttpRequest = new XMLHttpRequest();\r\n                request.open(form.method, form.action, true);\r\n                request.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\r\n                request.onreadystatechange = (ev: Event) : any => {\r\n                    var req = request;\r\n                    if (req.readyState === 4 /*DONE*/) {\r\n                        $YetaWF.setLoading(false);\r\n                        if ($YetaWF.processAjaxReturn(req.responseText, req.statusText, req, form, undefined, (result: string) => {\r\n                            this.preSubmitHandler1 = [];\r\n                            var partForm = $YetaWF.getElement1BySelectorCond(\".\" + YConfigs.Forms.CssFormPartial, [form]);\r\n                            if (partForm) {\r\n                                // clean up everything that's about to be removed\r\n                                $YetaWF.processClearDiv(partForm);\r\n                                // preserve the original css classes on the partial form (PartialFormCss)\r\n                                var cls = partForm.className;\r\n                                $YetaWF.setMixedOuterHTML(partForm, req.responseText);\r\n                                partForm = $YetaWF.getElement1BySelectorCond(\".\" + YConfigs.Forms.CssFormPartial, [form]);\r\n                                if (partForm)\r\n                                    partForm.className = cls;\r\n                            }\r\n                            this.callPostSubmitHandler(form);\r\n                            if (successFunc) // executed on successful ajax submit\r\n                                successFunc(this.hasErrors(form));\r\n                        })) {\r\n                            // ok\r\n                        } else {\r\n                            if (failFunc)\r\n                                failFunc();\r\n                        }\r\n                    }\r\n                };\r\n                request.send(formData);\r\n\r\n            } else {\r\n                $YetaWF.setLoading(false);\r\n                // find the first field in each tab control that has an input validation error and activate that tab\r\n                // This will not work for nested tabs. Only the lowermost tab will be activated.\r\n                var elems = $YetaWF.getElementsBySelector(\"div.yt_propertylisttabbed\", [form]);\r\n                elems.forEach((tabctrl: HTMLElement, index: number) => {\r\n                    YetaWF_FormsImpl.setErrorInTab(tabctrl);\r\n                });\r\n                var hasErrors = this.hasErrors(form);\r\n                if (hasErrors)\r\n                    this.showErrors(form);\r\n                // call callback (if any)\r\n                if (successFunc)\r\n                    successFunc(this.hasErrors(form));\r\n            }\r\n            var divs = $YetaWF.getElementsBySelector(\"div.\" + this.DATACLASS);\r\n            for (let div of divs)\r\n                $YetaWF.removeElement(div);\r\n        }\r\n\r\n        public submitTemplate(tag: HTMLElement, useValidation: boolean, templateName: string, templateAction: string, templateExtraData: string) : void {\r\n            var qs = `${YConfigs.Basics.TemplateName}=${templateName}&${YConfigs.Basics.Link_SubmitIsApply}=y`;\r\n            if (templateAction)\r\n                qs += `&${YConfigs.Basics.TemplateAction}=${encodeURIComponent(templateAction)}`;\r\n            if (templateExtraData)\r\n                qs += `&${YConfigs.Basics.TemplateExtraData}=${encodeURIComponent(templateExtraData)}`;\r\n            this.submit(this.getForm(tag), useValidation, qs);\r\n        }\r\n\r\n        public serializeForm(form: HTMLFormElement): string {\r\n            var pairs = this.serializeFormArray(form);\r\n            var formData: string = \"\";\r\n            for (var entry of pairs) {\r\n                if (formData !== \"\")\r\n                    formData += \"&\";\r\n                formData += encodeURIComponent(entry.name) + \"=\" + encodeURIComponent(entry.value);\r\n            }\r\n            return formData;\r\n        }\r\n\r\n        // Pre/post submit\r\n\r\n        // When a form is about to be submitted, all the functions in YPreSubmitHandler are called one by one\r\n        // This is used to add control-specific data to the data submitted by the form\r\n        // Usage:\r\n        // $YetaWF.Forms.addPreSubmitHandler(@Manager.InPartialForm ? 1 : 0, {\r\n        //   form: form,                // form <div> to be processed\r\n        //   callback: function() {}    // function to be called - the callback returns extra data appended to the submit url\r\n        //   userdata: callback-data,   // any data suitable to callback\r\n        // });\r\n\r\n        private preSubmitHandlerAll: SubmitHandlerEntry[] = []; // done every time before submit (never cleared) - used on main forms\r\n        private preSubmitHandler1: SubmitHandlerEntry[] = []; // done once before submit, then cleared - used in partial forms\r\n\r\n        /**\r\n         * Add a callback to be called when a form is about to be submitted.\r\n         */\r\n        public addPreSubmitHandler(inPartialForm: boolean, entry: SubmitHandlerEntry) : void {\r\n            if (inPartialForm) {\r\n                this.preSubmitHandler1.push(entry);\r\n            } else {\r\n                this.preSubmitHandlerAll.push(entry);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Call all callbacks for a form that is about to be submitted.\r\n         */\r\n        public callPreSubmitHandler(form: HTMLElement, onSubmitExtraData: string) : string {\r\n            for (let entry of this.preSubmitHandlerAll) {\r\n                if (entry.form === form) {\r\n                    // form specific\r\n                    var extra = entry.callback(entry);\r\n                    if (extra !== undefined) {\r\n                        if (onSubmitExtraData.length > 0)\r\n                            onSubmitExtraData = onSubmitExtraData + \"&\";\r\n                        onSubmitExtraData += extra;\r\n                    }\r\n                }\r\n            }\r\n            for (let entry of this.preSubmitHandler1) {\r\n                if (entry.form === form) {\r\n                    var extra = entry.callback(entry);\r\n                    if (extra !== undefined) {\r\n                        if (onSubmitExtraData.length > 0)\r\n                            onSubmitExtraData = onSubmitExtraData + \"&\";\r\n                        onSubmitExtraData += extra;\r\n                    }\r\n                }\r\n            }\r\n            return onSubmitExtraData;\r\n        }\r\n\r\n        // When a form has been successfully submitted, all the functions in YPostSubmitHandler are called one by one\r\n        // Usage:\r\n        // $YetaWF.Forms.addPostSubmitHandler(@Manager.InPartialForm ? 1 : 0, {\r\n        //   form: form,                // form <div> to be processed - may be null\r\n        //   callback: function() {}    // function to be called\r\n        //   userdata: callback-data,   // any data suitable to callback\r\n        // });\r\n        private YPostSubmitHandlerAll: SubmitHandlerEntry[] = []; // done every time after submit (never cleared) - used on main forms\r\n        private YPostSubmitHandler1: SubmitHandlerEntry[] = []; // done once after submit, then cleared - used in partial forms\r\n\r\n        /**\r\n         * Add a callback to be called when a form has been successfully submitted.\r\n         */\r\n        public addPostSubmitHandler(inPartialForm: boolean, entry: SubmitHandlerEntry) : void {\r\n            if (inPartialForm) {\r\n                this.YPostSubmitHandler1.push(entry);\r\n            } else {\r\n                this.YPostSubmitHandlerAll.push(entry);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Call all callbacks for a form that has been successfully submitted.\r\n         */\r\n        public callPostSubmitHandler(form: HTMLElement, onSubmitExtraData?: string) : void {\r\n            for (let entry of this.YPostSubmitHandlerAll) {\r\n                if (entry.form == null) {\r\n                    // global\r\n                    entry.callback(entry);\r\n                } else if (entry.form === form) {\r\n                    // form specific\r\n                    entry.callback(entry);\r\n                }\r\n            }\r\n            for (let entry of this.YPostSubmitHandler1) {\r\n                if (entry.form === form)\r\n                    entry.callback(entry);\r\n            }\r\n            this.YPostSubmitHandler1 = [];\r\n        }\r\n\r\n        // Forms retrieval\r\n        public getForm(tag: HTMLElement): HTMLFormElement {\r\n            return $YetaWF.elementClosest(tag, \"form\") as HTMLFormElement;\r\n        }\r\n        public getFormCond(tag: HTMLElement) : HTMLFormElement | null {\r\n            var form = $YetaWF.elementClosestCond(tag, \"form\");\r\n            if (!form) return null;\r\n            return form as HTMLFormElement;\r\n        }\r\n        public getInnerForm(tag: HTMLElement): HTMLFormElement {\r\n            return $YetaWF.getElement1BySelector(\"form\", [tag]) as HTMLFormElement;\r\n        }\r\n        public getInnerFormCond(tag: HTMLElement): HTMLFormElement | null {\r\n            return $YetaWF.getElement1BySelectorCond(\"form\", [tag]) as HTMLFormElement | null;\r\n        }\r\n        // get RequestVerificationToken, UniqueIdPrefix and ModuleGuid in query string format (usually for ajax requests)\r\n        public getFormInfo(tag: HTMLElement, addAmpersand?: boolean, counter?: number) : FormInfo {\r\n            var form = this.getForm(tag);\r\n            var req = ($YetaWF.getElement1BySelector(`input[name='${YConfigs.Forms.RequestVerificationToken}']`, [form]) as HTMLInputElement).value;\r\n            if (!req || req.length === 0) throw \"Can't locate \" + YConfigs.Forms.RequestVerificationToken;/*DEBUG*/\r\n            var pre = ($YetaWF.getElement1BySelector(`input[name='${YConfigs.Forms.UniqueIdPrefix}']`, [form]) as HTMLInputElement).value;\r\n            if (!pre || pre.length === 0) throw \"Can't locate \" + YConfigs.Forms.UniqueIdPrefix;/*DEBUG*/\r\n            if (counter)\r\n                pre += `_${counter}`;\r\n            var guid = ($YetaWF.getElement1BySelector(`input[name='${YConfigs.Basics.ModuleGuid}']`, [form]) as HTMLInputElement).value;\r\n            if (!guid || guid.length === 0) throw \"Can't locate \" + YConfigs.Basics.ModuleGuid;/*DEBUG*/\r\n            var charSize = $YetaWF.getCharSizeFromTag(form);\r\n\r\n            var qs: string = \"\";\r\n            if (addAmpersand !== false)\r\n                qs += \"&\";\r\n            qs += YConfigs.Forms.RequestVerificationToken + \"=\" + encodeURIComponent(req) +\r\n                \"&\" + YConfigs.Forms.UniqueIdPrefix + \"=\" + encodeURIComponent(pre) +\r\n                \"&\" + YConfigs.Basics.ModuleGuid + \"=\" + encodeURIComponent(guid) +\r\n                \"&\" + YConfigs.Basics.Link_CharInfo + \"=\" + charSize.width.toString() + \",\" + charSize.height.toString();\r\n\r\n            var info: FormInfo = {\r\n                RequestVerificationToken: req,\r\n                UniqueIdPrefix: pre,\r\n                ModuleGuid: guid,\r\n                CharInfo: charSize.width.toString() + \",\" + charSize.height.toString(),\r\n                QS: qs\r\n            };\r\n            return info;\r\n        }\r\n\r\n        // Submit/apply on change/keydown\r\n\r\n        public submitOnChange(elem: HTMLElement): void {\r\n            clearInterval(this.submitFormTimer);\r\n            this.submitForm = this.getForm(elem);\r\n            this.submitFormTimer = setInterval(() : void => this.submitFormOnChange(), 1000);// wait 1 second and automatically submit the form\r\n            $YetaWF.setLoading(true);\r\n        }\r\n        public submitOnReturnKey(elem: HTMLElement) : void {\r\n            this.submitForm = this.getForm(elem);\r\n            this.submitFormOnChange();\r\n        }\r\n        public applyOnChange(elem: HTMLElement) : void {\r\n            clearInterval(this.submitFormTimer);\r\n            this.submitForm = this.getForm(elem);\r\n            this.submitFormTimer = setInterval(() => this.applyFormOnChange(), 1000);// wait 1 second and automatically submit the form\r\n            $YetaWF.setLoading(true);\r\n        }\r\n        public applyOnReturnKey(elem: HTMLElement) : void {\r\n            this.submitForm = this.getForm(elem);\r\n            this.applyFormOnChange();\r\n        }\r\n        public reloadOnChange(elem: HTMLElement): void {\r\n            clearInterval(this.submitFormTimer);\r\n            this.submitForm = this.getForm(elem);\r\n            this.submitFormTimer = setInterval(() => this.reloadFormOnChange(), 1000);// wait 1 second and automatically submit the form\r\n            $YetaWF.setLoading(true);\r\n        }\r\n        public reloadOnReturnKey(elem: HTMLElement): void {\r\n            this.submitForm = this.getForm(elem);\r\n            this.reloadFormOnChange();\r\n        }\r\n\r\n        private submitFormTimer: number | undefined = undefined;\r\n        private submitForm: HTMLFormElement | null = null;\r\n\r\n        private submitFormOnChange(): void {\r\n            clearInterval(this.submitFormTimer);\r\n            if (!this.submitForm) return;\r\n            this.submit(this.submitForm, false);\r\n        }\r\n        private applyFormOnChange(): void {\r\n            clearInterval(this.submitFormTimer);\r\n            if (!this.submitForm) return;\r\n            this.submit(this.submitForm, false, YConfigs.Basics.Link_SubmitIsApply + \"=y\");\r\n        }\r\n        private reloadFormOnChange(): void {\r\n            clearInterval(this.submitFormTimer);\r\n            if (!this.submitForm) return;\r\n            this.submit(this.submitForm, false, YConfigs.Basics.Link_SubmitIsReload + \"=y\");\r\n        }\r\n\r\n        // submit form on change\r\n\r\n        /**\r\n         * Handles submitonchange/applyonchange\r\n         */\r\n        public initSubmitOnChange(): void {\r\n\r\n            // submit\r\n            $YetaWF.registerEventHandlerBody(\"change\", \".ysubmitonchange select,.ysubmitonchange input[type=\\\"checkbox\\\"]\", (ev: Event) => {\r\n                this.submitOnChange(ev.target as HTMLElement);\r\n                return false;\r\n            });\r\n            $YetaWF.registerEventHandlerBody(\"keyup\", \".ysubmitonchange select\", (ev: KeyboardEvent) => {\r\n                if (ev.keyCode === 13) {\r\n                    this.submitOnChange(ev.target as HTMLElement);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            // apply\r\n\r\n            $YetaWF.registerEventHandlerBody(\"change\", \".yapplyonchange select,.yapplyonchange input[type=\\\"checkbox\\\"]\", (ev: Event) => {\r\n                this.applyOnChange(ev.target as HTMLElement);\r\n                return false;\r\n            });\r\n            $YetaWF.registerEventHandlerBody(\"keyup\", \".yapplyonchange select\", (ev: KeyboardEvent) => {\r\n                if (ev.keyCode === 13) {\r\n                    this.applyOnChange(ev.target as HTMLElement);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            // reload\r\n\r\n            $YetaWF.registerEventHandlerBody(\"change\", \".yreloadonchange select,.yreloadonchange input[type=\\\"checkbox\\\"]\", (ev: Event) => {\r\n                this.reloadOnChange(ev.target as HTMLElement);\r\n                return false;\r\n            });\r\n            $YetaWF.registerEventHandlerBody(\"keyup\", \".yreloadonchange select\", (ev: KeyboardEvent) => {\r\n                if (ev.keyCode === 13) {\r\n                    this.reloadOnChange(ev.target as HTMLElement);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Initialize to handle Submit, Apply, Cancel buttons\r\n         */\r\n        public initHandleFormsButtons(): void {\r\n            // Cancel the form when a Cancel button is clicked\r\n\r\n            $YetaWF.registerEventHandlerBody(\"click\", \"form .\" + YConfigs.Forms.CssFormCancel, (ev: MouseEvent):boolean => {\r\n\r\n                if ($YetaWF.isInPopup()) {\r\n                    // we're in a popup, just close it\r\n                    $YetaWF.closePopup();\r\n                } else {\r\n                    // go to the last entry in the origin list, pop that entry and pass it in the url\r\n                    var originList = YVolatile.Basics.OriginList;\r\n                    if (originList.length > 0) {\r\n                        var origin = originList.pop() as OriginListEntry;\r\n                        var uri = $YetaWF.parseUrl(origin.Url);\r\n                        uri.removeSearch(YConfigs.Basics.Link_ToEditMode);\r\n                        if (origin.EditMode !== YVolatile.Basics.EditModeActive)\r\n                            uri.addSearch(YConfigs.Basics.Link_ToEditMode, !YVolatile.Basics.EditModeActive ? \"0\":\"1\");\r\n                        uri.removeSearch(YConfigs.Basics.Link_OriginList);\r\n                        if (originList.length > 0)\r\n                            uri.addSearch(YConfigs.Basics.Link_OriginList, JSON.stringify(originList));\r\n                        if (!$YetaWF.ContentHandling.setContent(uri, true))\r\n                            window.location.assign(uri.toUrl());\r\n                    } else {\r\n                        // we don't know where to return so just close the browser\r\n                        try {\r\n                            window.close();\r\n                        } catch (e) { }\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n\r\n            // Submit the form when an apply button is clicked\r\n            $YetaWF.registerEventHandlerBody(\"click\", `form input[type=\"button\"][${YConfigs.Forms.CssDataApplyButton}]`, (ev: MouseEvent) : boolean => {\r\n                var form = this.getForm(ev.target as HTMLElement);\r\n                this.submit(form, true, YConfigs.Basics.Link_SubmitIsApply + \"=y\");\r\n                return false;\r\n            });\r\n\r\n            // Submit the form when a submit button is clicked\r\n\r\n            $YetaWF.registerEventHandlerBody(\"submit\", \"form.\" + YConfigs.Forms.CssFormAjax, (ev: Event) : boolean => {\r\n                var form = this.getForm(ev.target as HTMLElement);\r\n                this.submit(form, true);\r\n                return false;\r\n            });\r\n        }\r\n        public init() : void {\r\n            // initialize submit on change\r\n            this.initSubmitOnChange();\r\n            // initialize  Submit, Apply, Cancel button handling\r\n            this.initHandleFormsButtons();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}